What happens when you initialize a repository? Why do you need to do it?
    It creates a new repository where I can track the changes made inside that folder.
    I need to do it to secure my work and to track my changes

How is the staging area different from the working directory and the repository?
What value do you think it offers?
    The staging area is in the middle of the working directory and the repository, it has the
    the changes that will be commited to the repository from the working directory. It offers
    the posibility of separate the work that is needed to commit and the code that not.


How can you use the staging area to make sure you have one commit per logical
change?
    After each particular change I can use the staging area to include there only the files that changed,
    when solving a problem, to separe them from the others which changed but are not affecting the current logic. 


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
    When there is a new feature but it is not high priority.
    When there are some changes in the code that are only yours and not in the main code.   


How do the diagrams help you visualize the branch structure?
    It shows the history of the commits and the origin of each commit and branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
    The result is the combination of the 2 branches into a single one, saving all the changes from both.
    In the diagram it is showed as a the union of both and could be understood better

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
    Pros: Automatic avoids the tedious of comparing unnecessary changes which are obvious.
            The manual merges can help to merge files when there is a complexity in logic
    Cons: It could assume a change is good when it was not.
